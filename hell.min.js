class Area{constructor(t,e,s,i,a){this.x=Math.round(t),this.y=Math.round(e),this.w=Math.max(Math.round(s),1),this.h=Math.max(Math.round(i),1),this.c=a}isInside(t,e){return t>=this.x&&t<this.x+this.w&&e>=this.y&&e<this.y+this.h}}class Node extends Area{constructor(t,e,s,i){super(t,e,s,i,Math.floor(random(255))),this.paths=[],this.walls=[]}split(t){if(this.a||this.b)return!1;const e=Math.random()>this.w/(this.w+this.h);if(t>(e?this.h:this.w))return!1;const s=(e?this.h:this.w)-t;if(s<t)return!1;const i=Math.floor(random(t,s));return e?(this.a=new Node(this.x,this.y,this.w,i),this.b=new Node(this.x,this.y+i,this.w,this.h-i)):(this.a=new Node(this.x,this.y,i,this.h),this.b=new Node(this.x+i,this.y,this.w-i,this.h)),!0}createRooms(){if(this.a||this.b)this.a&&this.a.createRooms(),this.b&&this.b.createRooms(),this.a&&this.b&&this.createPath(this.a.getRoom(),this.b.getRoom());else{const t=Math.floor(random(3,this.w-2)),e=Math.floor(random(3,this.h-2)),s=Math.floor(random(1,this.w-t-1)),i=Math.floor(random(1,this.h-e-1));this.room=new Room(s+this.x,i+this.y,t,e,"plum")}}createWalls(){if(this.paths.length){let t=[];this.a&&(t=t.concat(this.a.getRooms())),this.b&&(t=t.concat(this.b.getRooms()));for(let e=this.x;e<this.x+this.w;e++)for(let s=this.y;s<this.y+this.h;s++){let i=!1;for(let a=0;a<t.length;a++)t[a].isInside(e,s)&&(i=!0);for(let t=0;t<this.paths.length;t++)this.paths[t].isInside(e,s)&&(i=!0);i||this.walls.push(new Wall(e,s))}}else this.a&&this.a.createWalls(),this.b&&this.b.createWalls()}getRooms(){if(this.room)return[this.room];{let t,e;return this.a&&(t=this.a.getRooms()),this.b&&(e=this.b.getRooms()),t||e?t?e?t.concat(e):[e]:[t]:null}}getRoom(){if(this.room)return this.room;{let t,e;return this.a&&(t=this.a.getRoom()),this.b&&(e=this.b.getRoom()),t||e?e?t&&random(1)>.5?t:e:t:null}}createPath(t,e){let s={x:Math.floor(random(t.x+1,t.x+t.w-2)),y:Math.floor(random(t.y+1,t.y+t.h-2))},i={x:Math.floor(random(e.x+1,e.x+e.w-2)),y:Math.floor(random(e.y+1,e.y+e.h-2))},a=i.x-s.x,o=i.y-s.y;a<0?o<0?random(1)>.5?(this.paths.push(new Path(i.x,s.y,Math.abs(a)+1,1,"gold")),this.paths.push(new Path(i.x,i.y,1,Math.abs(o)+1,"gold"))):(this.paths.push(new Path(i.x,i.y,Math.abs(a)+1,1,"gold")),this.paths.push(new Path(s.x,i.y,1,Math.abs(o)+1,"gold"))):o>0?random(1)>.5?(this.paths.push(new Path(i.x,s.y,Math.abs(a)+1,1,"gold")),this.paths.push(new Path(i.x,s.y,1,Math.abs(o)+1,"gold"))):(this.paths.push(new Path(i.x,i.y,Math.abs(a)+1,1,"gold")),this.paths.push(new Path(s.x,s.y,1,Math.abs(o),"gold"))):this.paths.push(new Path(i.x,i.y,Math.abs(a)+1,1,"gold")):a>0?o<0?random(1)>.5?(this.paths.push(new Path(s.x,i.y,Math.abs(a)+1,1,"gold")),this.paths.push(new Path(s.x,i.y,1,Math.abs(o)+1,"gold"))):(this.paths.push(new Path(s.x,s.y,Math.abs(a)+1,1,"gold")),this.paths.push(new Path(i.x,i.y,1,Math.abs(o)+1,"gold"))):o>0?random(1)>.5?(this.paths.push(new Path(s.x,s.y,Math.abs(a)+1,1,"gold")),this.paths.push(new Path(i.x,s.y,1,Math.abs(o)+1,"gold"))):(this.paths.push(new Path(s.x,i.y,Math.abs(a)+1,1,"gold")),this.paths.push(new Path(s.x,s.y,1,Math.abs(o)+1,"gold"))):this.paths.push(new Path(s.x,s.y,Math.abs(a)+1,1,"gold")):o<0?this.paths.push(new Path(i.x,i.y,1,Math.abs(o)+1,"gold")):this.paths.push(new Path(s.x,s.y,1,Math.abs(o)+1,"gold"))}display(){"undefined"!=typeof p5&&(textSize(14),fill("blue"),textAlign(LEFT,TOP),text(`${this.x},${this.y}`,this.x*cell.w,this.y*cell.h)),this.room&&this.room.display(),this.a&&this.a.display(),this.b&&this.b.display();for(let t=0;t<this.paths.length;t++)this.paths[t].display();for(let t=0;t<this.walls.length;t++)this.walls[t].display()}}class Map{constructor(t,e,s,i){this.cols=t,this.rows=e,this.minNodeSize=s,this.maxNodeSize=i,this.nodes=[]}build(t,e){this.walls=[],this.nodes.push(new Node(t.w,t.h,this.cols-2*t.w,this.rows-2*t.h)),console.groupCollapsed("load map"),console.time("nodes");let s=!0;for(;s&&this.nodes.length<e;){s=!1;for(let t=0,i=this.nodes.length;t<i;t++){const i=this.nodes[t];!i.a&&!i.b&&this.nodes.length<e-1&&(i.w>this.maxNodeSize||i.h>this.maxNodeSize||random(1)>.5)&&i.split(this.minNodeSize)&&(this.nodes.push(i.a),this.nodes.push(i.b),s=!0)}}console.timeEnd("nodes"),console.time("rooms"),this.nodes[0].createRooms(),console.timeEnd("rooms"),console.time("walls");for(let t=0;t<this.cols;t++)for(let e=0;e<this.rows;e++){let s=!1;for(let i=0;i<this.nodes.length;i++){this.nodes[i].room&&this.nodes[i].room.isInside(t,e)&&(s=!0);for(let a=0;a<this.nodes[i].paths.length;a++)this.nodes[i].paths[a].isInside(t,e)&&(s=!0)}s||this.walls.push(new Wall(t*cellSize.w,e*cellSize.h,"green"))}console.timeEnd("walls"),console.groupEnd()}}class Room extends Area{constructor(...t){super(...t),this.texture=new Texture({frame:"randomIndex",center:!0},!1),this.addTextureAnimation();let e=[];for(let t=gme.lvl,s=gme.lvl+Cool.random(4,8);t<s;t++){const i=1-(t-gme.lvl)/s;for(let s=0;s<Math.floor(10*i);s++)e.push(t)}console.log(e);for(let t=this.x;t<this.x+this.w;t++)for(let s=this.y;s<this.y+this.h;s++)this.texture.addLocation(Cool.random(e),t*cellSize.w,s*cellSize.h);console.log(this.texture.locations),this.debug=!0,this.takenCells=[]}addTextureAnimation(){this.texture.animation=gme.anims.textures.dirt}getCell(t){const e=[];for(let t=this.x;t<this.x+this.w-1;t++)for(let s=this.y;s<this.y+this.h-1;s++)this.takenCells.some(e=>e.x==t&&e.y==s)||e.push({x:t,y:s});const s=Cool.random(e);return this.takenCells.push({...s,label:t}),s}display(){this.texture.display(),this.debug&&mapAlpha>0&&(gme.ctx.globalAlpha=mapAlpha/2,gme.ctx.fillStyle=this.c,gme.ctx.fillRect(this.x*mapCellSize,this.y*mapCellSize,this.w*mapCellSize,this.h*mapCellSize),gme.ctx.fillStyle="white",gme.ctx.font=mapCellSize/2+"px sans-serif",gme.ctx.fillText(`${this.x},${this.y}`,this.x*mapCellSize,this.y*mapCellSize+10),gme.ctx.globalAlpha=1)}update(t){this.texture.update(t)}}class HellItem extends Entity{constructor(t,e,s,i,a){super({x:t,y:e}),this.addAnimation(s);for(const t in i)this[t]=i[t]||0;this.consumeString,"food"==a?(this.consumeString="Eat",this.c="red"):"scripture"==a&&(this.c="lightblue",this.consumeString="Read")}}class MapItem extends HellItem{constructor(...t){super(...t)}display(){super.display(),this.ui.display(),mapAlpha>0&&(gme.ctx.globalAlpha=mapAlpha,gme.ctx.fillStyle=this.c,gme.ctx.fillRect(this.origin.x/cellSize.w*mapCellSize,this.origin.y/cellSize.h*mapCellSize,8,8),gme.ctx.globalAlpha=1)}update(t){super.update(t),this.collide(player)?this.ui.all((t,e)=>{t.updatePosition(),t.isActive=!0}):this.ui.all(t=>{t.isActive=!1})}over(t,e){this.ui.all(s=>s.over(t,e))}out(t,e){this.ui.all(s=>s.out(t,e))}down(t,e){this.ui.all(s=>s.down(t,e))}up(t,e){this.ui.all(s=>s.up(t,e))}}class Cursor{constructor(t){this.states=t,this.elem=document.getElementById("cursor"),this.x=0,this.y=0,this.isDown=!1}set state(t){this._state!=t&&(this._state=t,this.elem.src=this.states[t])}get state(){return this._state}down(){this.isDown=!0}up(){this.isDown=!1}}class HellButton extends Button{constructor(...t){super(...t),Object.assign(this,buttonMixin)}}class HellGame extends Game{constructor(...t){super(...t),this.lvl=0}set scene(t){if(t!=this.scenes._current){switch(this.scenes.current=t,ui.cursor.state="interact",t){case"map":ui.packToggle.toggle("off",!1),ui.cursor.state="walk";break;case"loading":ui.cursor.state="loading";break;case"message":ui.packToggle.toggle("off",!1);break;case"pack":ui.packToggle.toggle("on",!1)}ui.arrow.isActive=!1}}get currentScene(){return this.scenes.current}get currentSceneName(){return this.scenes._current}get lvlName(){return 0==this.lvl?"Purgatory":"Ring of Hell "+this.lvl}}class HellGate extends MapItem{constructor(...t){super(...t),this.c="orange",this.enter=new HellTextButton(this.position.x,this.position.y+this.height/2,"Enter Hell's Gate",gme.anims.lettering.messages),this.enter.isActive=!1,this.enter.updatePosition=()=>{this.enter.setPosition(this.position.x-this.width/2,this.position.y+this.height/2)},this.enter.onClick=()=>{gme.scene="message",player.died=!0,player.checkMorality()},this.ui=new SpriteCollection([this.enter])}}class HellMap extends Map{constructor(...t){super(...t),gme.scenes.map.add(this),Object.assign(this,itemMixin)}build(t){const e=5+gme.lvl;super.build({w:Math.ceil(gme.width/2/cellSize.w),h:Math.ceil(gme.height/2/cellSize.h)},e),this.roomCount=0,this.nodes.forEach(t=>{t.room&&this.roomCount++});const s=["#ffffff","#F8F8F8","#F0F0F0","#E8E8E8","#E0E0E0","#D8D8D8","#D0D0D0","#C8C8C8","#C0C0C0","#B8B8B8","#B0B0B0","#A8A8A8","#A0A0A0","#989898","#909090","#888888","#808080","#787878","#707070","#686868","#606060","#585858","#505050","#484848","#404040","#383838","#303030","#282828","#202020","#181818","#101010","#080808"],i=s[Math.min(gme.lvl,s.length-1)];this.walls.forEach(t=>{t.texture.animation.over={c:i}}),this.nodes.forEach(t=>{t.room&&(t.room.texture.animation.over={c:i}),t.paths&&t.paths.forEach(t=>{t.texture.animation.over={c:i}})}),console.log("bgColor",i),this.items=new SpriteCollection,this.addItems("food",PickupItem),this.addItems("scripture",PickupItem),this.addItems("sinner",Sinner,1),t&&t()}addHellsGate(){const t=Cool.random(this.nodes.filter(t=>t.room).filter(t=>!t.room.takenCells.some(t=>"player"==t.label))).room.getCell("hells_gate"),e=new HellGate(t.x*cellSize.w+Cool.random(-cellSize.w/4,cellSize.w/4),t.y*cellSize.h+Cool.random(-cellSize.h/4,cellSize.h/4),gme.anims.sprites.hells_gate,["fart",0,0,0,0,0,0,0,0],"gate");this.items.add(e)}prob(t){return t=t.replace(/p(?![a-z])/g,Cool.map(gme.lvl,0,28,0,1)),Function("return "+t)().clamp(0,1)}addItems(t,e,s){const i=s||random(1,this.roomCount),a=gme.data.items.entries.filter(e=>e.type==t),o=[],h=[];for(let t=0;t<a.length;t++){const e=this.prob(a[t].probability);if(1==e)h.push(t);else if(e>0)for(let s=0;s<100*e;s++)o.push(t)}for(;h.length<i;)h.push(Cool.random(o.filter(t=>!h.includes(t))));for(;h.length>0;){const s=Cool.random(this.nodes.filter(t=>t.room)),i=a[h.pop()],o=s.room.getCell(t),n=new e(o.x*cellSize.w+Cool.random(-cellSize.w/4,cellSize.w/4),o.y*cellSize.h+Cool.random(-cellSize.h/4,cellSize.h/4),gme.anims.items[i.label],i,t);this.items.add(n)}}add(t){this.items.add(t)}remove(t){this.items.remove(t)}display(){this.nodes[0].display();for(let t=0;t<this.walls.length;t++)this.walls[t].display();this.items.display()}update(){const t=new Cool.Vector(-player.mapPosition.x+gme.width/2,-player.mapPosition.y+gme.height/2);for(let e=0;e<this.nodes.length;e++){const s=this.nodes[e];s.room&&s.room.update(t);for(let e=0;e<s.paths.length;e++)s.paths[e].update(t)}for(let e=0;e<this.walls.length;e++)this.walls[e].update(t);let e=!1;for(let t=0;t<map.walls.length;t++){map.walls[t].collide(player)&&(e=!0)}e&&player.back(),this.items.all(e=>{e.update(t)})}}class HellMessage extends Text{constructor(t,e,s,i,a){super(t,e,s,i,a),this.list=[],this.continue=new HellTextButton(this.x,this.y,"Click Here To Explore Purgatory",gme.anims.lettering.messages),gme.scenes.add(this,["message","loading","pack","win"],"display"),gme.scenes.add(this.continue,["pack","message","win"],"ui"),this.continue.onClick=()=>{0==this.list.length?(this.set(""),player.died?loadNextMap():this.next?this.next():gme.scene="map",this.next=void 0):(this.set(this.list.shift()),this.continue.check())}}add(t){let e=!1,s=4*this.wrap,i=0;for(let a=0;a<t.length;a++)a==i+s||e?t[a].match(/[\n\r\s]/g)?(this.list.push(t.substring(i,a)),e=!1,i=a+1):e=!0:i+s>t.length&&(this.list.push(t.substring(i,t.length)),a=t.length);this.msg||this.set(this.list.shift())}set(t){if(super.setMsg(t),t){this.isActive=!0;const e=t.match(/[\n\r]/g),s=this.y+35*(this.breaks.length+2+(e?e.length:0));this.continue.setPosition(this.x,s),this.continue.isActive=!0}else this.active=!1,this.continue.isActive=!1}display(){super.display()}reset(){this.set(""),this.next=void 0}}class HellTextButton extends TextButton{constructor(t,e,s,i,a,o){super(t,e,s,s.length,i),this.cursorState=a||"interact",o&&(this.onClick=o)}onOver(){ui.cursor.state=this.cursorState,ui.arrow.isActive=!0,ui.arrow.position.x=this.position.x+this.width,ui.arrow.position.y=this.position.y}onOut(){ui.cursor.state="map"==gme.currentSceneName?"walk":"interact",ui.arrow.isActive=!1}onDown(){ui.cursor.state="click"}onUp(){ui.cursor.state="map"==gme.currentSceneName?"walk":"interact",ui.arrow.isActive=!1}check(){this.tap(ui.cursor.x,ui.cursor.y)&&(ui.arrow.isActive=!0)}}class HellToggle extends Toggle{constructor(...t){super(...t),Object.assign(this,buttonMixin)}}class Pack{constructor(){this.size=3,this.maxSize=9,this.x=centerAlign,this.y=packY,this.w=128,this.h=128,this.state="player",gme.scenes.pack.addUI(this),Object.assign(this,itemMixin),this.label=new Text(this.x,140,"Pack",9,gme.anims.lettering.metrics),this.items=new SpriteCollection,this.labels=[];for(let t=0;t<this.maxSize;t++)this.labels[t]=new Text(this.x+this.w*t,this.y+Math.floor(t/3)*this.h-this.h/2,""+(t+1),1,gme.anims.lettering.metrics)}add(t,e){return gme.scene="pack",this.items.length<this.size?(this.items.add(new PackItem(...t)),ui.message.set(`You picked up the ${e}.`),this.items.all((t,e)=>{t.position.x=this.x+this.w*e+this.w/2,t.position.y=this.y+Math.floor(e/3)*this.h}),!0):(gme.scene="message",ui.message.set("Your pack is full."),!1)}remove(t){this.items.remove(t)}display(){this.label.display();for(let t=0;t<this.size;t++)this.labels[t].display();this.items.display()}}class PackItem extends HellItem{constructor(...t){super(...t),this.displayPack=!1,Object.assign(this,buttonMixin);let e="interact";"food"==this.type?e="eat":"scripture"==this.type&&(e="read"),this.consume=new HellTextButton(leftAlign,packY-35,`${this.consumeString} ${this.label}`,gme.anims.lettering.messages,e),this.consume.isActive=!1,this.consume.onClick=()=>{player.consume(this,this.type),pack.remove(this)},this.drop=new HellTextButton(leftAlign,packY,"Drop "+this.label,gme.anims.lettering.messages,"drop"),this.drop.isActive=!1,this.drop.onClick=()=>{pack.remove(this);const e=new MapItem(...t);e.setPosition(player.x,player.y),map.add(e),gme.scene="map"},this.ui=new SpriteCollection([this.consume,this.drop])}display(){super.display(),this.ui.display()}onClick(){if("npc"==pack.state){pack.remove(this),ui.message.reset();for(const t in player.world)sinner[t]+=+this[t],sinner.moralityScore>=0?player.morality.adjust++:player.morality.adjust--;gme.scene="map",ui.metrics.morality.update(),sinner=void 0,pack.state="player"}else if("player"==pack.state){const t=!this.displayPack;pack.items.all(t=>t.togglePackDisplay(!1)),this.togglePackDisplay(t)}}togglePackDisplay(t){this.displayPack=void 0===t?!this.displayPackUI:t,this.ui.all(t=>{t.isActive=this.displayPack})}over(t,e){super.over(t,e),this.ui.all(s=>s.over(t,e))}out(t,e){super.out(t,e),this.ui.all(s=>s.out(t,e))}down(t,e){super.down(t,e),this.ui.all(s=>s.down(t,e))}up(t,e){super.up(t,e),this.ui.all(s=>s.up(t,e))}}class Path extends Room{addTextureAnimation(){this.texture.animation=gme.anims.textures.grass}}class PickupItem extends MapItem{constructor(...t){super(...t),this.pickup=new HellTextButton(this.position.x+this.width/2,this.position.y,"Pick up "+this.label,gme.anims.lettering.messages,"pack"),this.pickup.isActive=!1,this.pickup.updatePosition=()=>{this.pickup.setPosition(this.position.x+this.width/2,this.position.y-35)},this.pickup.onClick=()=>{pack.add(t,this.label)&&(ui.arrow.isActive=!1,map.remove(this))};let e="interact";"food"==this.type?e="eat":"scripture"==this.type&&(e="read"),this.consume=new HellTextButton(this.position.x+this.width/2,this.position.y,`${this.consumeString} ${this.label}`,gme.anims.lettering.messages,e),this.consume.isActive=!1,this.consume.updatePosition=()=>{this.consume.setPosition(this.position.x+this.width/2,this.position.y)},this.consume.onClick=()=>{map.remove(this),player.consume(this,this.type)},this.ui=new SpriteCollection([this.pickup,this.consume])}}class Player extends Sprite{constructor(t,e,s,i){super(Math.round(e),Math.round(s)),this.mapPosition={x:Math.round(e),y:Math.round(s)},this.prevPosition={x:this.mapPosition.x,y:this.mapPosition.y},this.center=!0,this.debug=i||!1,this.speed=new Cool.Vector(8,8),this.addAnimation(t),this.animation.state="idle",this.setCollider(25,6,78,90),this.input={right:!1,up:!1,left:!1,down:!1},this.target=new Cool.Vector(0,0),this.metricCount=0,this.died=!1,this.health=100,this.hunger=0,this.hungerRate=.05,this.hungerLevel=0,this.hungerString="",this.morality={gluttony:0,sloth:0,lust:0,pride:0,greed:0,envy:0,wrath:0,adjust:0},this.world={gluttony:1,sloth:1,lust:1,pride:1,greed:1,envy:1,wrath:1}}get moralityScore(){return Object.values(this.morality).reduce((t,e)=>t+e)}inputKey(t,e){this.input[t]=e}setTarget(t,e){this.target={x:t,y:e},this.hunger+=this.hungerRate}update(){Math.abs(this.target.x)<this.speed.x&&(this.target.x=0),Math.abs(this.target.y)<this.speed.y&&(this.target.y=0),this.prevPosition={x:this.mapPosition.x,y:this.mapPosition.y};let t=this.animation.stateName.includes("idle")?this.animation.stateName:Cool.random(["idle"]);(this.input.up||this.target.y<0)&&(this.target.y<0&&(this.target.y+=this.speed.y),this.mapPosition.y>gme.bounds.top&&(this.mapPosition.y-=this.speed.y),t="right"),(this.input.down||this.target.y>0)&&(this.target.y>0&&(this.target.y-=this.speed.y),this.mapPosition.y<gme.bounds.bottom&&(this.mapPosition.y+=this.speed.y),t="left"),(this.input.right||this.target.x>0)&&(this.target.x>0&&(this.target.x-=this.speed.x),this.mapPosition.x<gme.bounds.right&&(this.mapPosition.x+=this.speed.x),t="right"),(this.input.left||this.target.x<0)&&(this.target.x<0&&(this.target.x+=this.speed.x),this.mapPosition.x>gme.bounds.left&&(this.mapPosition.x-=this.speed.x),t="left"),this.animation.state=t,this.died||(200==this.metricCount&&(this.checkHunger(),this.metricCount=0),this.metricCount++)}back(){this.target={x:0,y:0},this.mapPosition=this.prevPosition}spawn(){const t=Cool.random(map.nodes.filter(t=>t.room)).room.getCell("player");this.mapPosition.x=t.x*cellSize.w,this.mapPosition.y=t.y*cellSize.h}reborn(){this.health=100,ui.metrics.level.update(),this.died=!1,this.speed.x=8,this.speed.y=8,this.target.x=0,this.target.y=0}checkMorality(){0==this.moralityScore?(ui.message.add("You hath been morally neutral."),ui.message.add(`You will remain in ${0==gme.lvl?"purgatory":"this ring of hell"}.`)):this.moralityScore>0?gme.lvl<=0?(gme.lvl,gme.scene="win",ui.message.continue.setMsg("Play again"),ui.message.next=loadNextMap):(gme.lvl-=1,ui.message.add("You hath acted morally.")):(ui.message.add("You are a sinner."),ui.message.add("You descend further into hell."),gme.lvl+=1),ui.metrics.morality.update()}checkHunger(){if(Math.floor(this.hunger)>this.hungerLevel){switch(this.hungerLevel=Math.floor(this.hunger),this.hungerLevel>2&&(this.speed.x-=1,this.speed.y-=1),this.hungerLevel){case 0:this.hungerString="";case 1:this.hungerString="You feel a pang of hunger.";break;case 2:this.hungerString="Was that sound your stomach?";break;case 3:this.hungerString="Your stomach growled.";break;case 4:this.hungerString="Your stomach is twisting in pain.";break;case 5:this.hungerString="You feel weak.";break;case 6:this.hungerString="You feel light headed.";break;case 7:this.hungerString="Your body is desparate for food.";break;case 8:gme.scene="message",ui.message.set("You starved to death."),this.died=!0,this.checkMorality()}ui.metrics.hunger.update()}}consume(t,e){switch(this.typeString,e){case"food":this.typeString="ate";break;case"scripture":this.typeString="read"}gme.scene="message",this.speed.x=8,this.speed.y=8,ui.message.set(`You ${this.typeString} the ${t.label}.`),ui.message.add(t.source),console.log(this.hunger,+t.hunger),this.hunger=Math.max(0,this.hunger+ +t.hunger),this.hungerRate=Math.max(.1,this.hungerRate+ +t.hungerRate);for(const s in this.world)"food"==e?this.morality[s]+=+t[s]:"scripture"==e&&(this.world[s]+=+t[s]);this.speed.x+=t.speed,this.speed.y+=t.speed,ui.metrics.morality.update()}display(){super.display(),mapAlpha>0&&(gme.ctx.globalAlpha=mapAlpha,gme.ctx.fillStyle="blue",gme.ctx.fillRect(this.mapPosition.x/cellSize.w*mapCellSize,this.mapPosition.y/cellSize.h*mapCellSize,8,8),gme.ctx.globalAlpha=1)}}class Sinner extends MapItem{constructor(...t){super(...t),this.c="purple",this.give=new HellTextButton(this.position.x,this.position.y-this.height,`Offer ${this.label} an item.`,gme.anims.lettering.messages,"offer"),this.give.isActive=!1,this.give.updatePosition=()=>{this.give.setPosition(this.position.x-this.width,this.position.y-3*this.height/4)},this.give.onClick=()=>{gme.scene="pack",pack.items.length>0?(ui.message.set("Choose an item to give "+this.label),ui.message.continue.isActive=!1,pack.state="npc",sinner=this,ui.message.next=()=>{pack.state="player"}):(ui.message.set("Your pack is empty."),ui.message.next=()=>{gme.scene="map"})},this.ui=new SpriteCollection([this.give])}get moralityScore(){let t=0;for(const e in player.world)t+=this[e];return t}}class UIMetric extends Text{constructor(t,e,s){const i=s();super(t,e,i,i.length,gme.anims.lettering.metrics),this.callback=s,gme.scenes.addToDisplay(this,["map","pack","message"])}update(){super.setMsg(this.callback()),this.wrap=this.msg.length,this.setBreaks()}}class Wall extends Sprite{constructor(t,e,s){super(t*cellSize.w,e*cellSize.h,cellSize.w,cellSize.h),this.center=!0,this.origin=new Cool.Vector(t,e),this.texture=new Texture({frame:"index",center:!0,animation:gme.anims.textures.walls},!1);let i=[];for(let t=2*gme.lvl,e=gme.lvl+Cool.random(5,10);t<e;t++){const s=1-(t-gme.lvl)/e;for(let e=0;e<Math.floor(10*s);e++)i.push(t)}for(let s=0,a=Cool.random([1,2,2,2,3,3,4]);s<a;s++)this.texture.addLocation(Cool.random(i),t+Cool.random(-cellSize.w/3,cellSize.w/3),e+Cool.random(-cellSize.h/3,cellSize.h/3))}display(){super.display(),this.texture.display()}update(t){this.position.x=this.origin.x+t.x,this.position.y=this.origin.y+t.y,this.texture.update(t)}}const buttonMixin={onOver(){ui.cursor.state="interact"},onOut(){ui.cursor.state="map"==gme.currentSceneName?"walk":"interact"},onDown(){ui.cursor.state="click"},onUp(){ui.cursor.state="map"==gme.currentSceneName?"walk":"interact"}},itemMixin={over(t,e){this.items.all(s=>s.over(t,e))},out(t,e){this.items.all(s=>s.out(t,e))},down(t,e){this.items.all(s=>s.down(t,e))},up(t,e){this.items.all(s=>s.up(t,e))}};window.random=Cool.random;const gme=new HellGame({width:window.innerWidth,height:window.innerHeight,lps:10,mixedColors:!0,checkRetina:!0,debug:!0,stats:!1,scenes:["map","pack","message","loading","win"]});let player,god,pack,sinner;gme.load({ui:"data/ui.json",sprites:"data/sprites.json",textures:"data/textures.json",items:"data/items.csv",lettering:"data/lettering.json"});let map,ui,cols=30,rows=30,minNodeSize=8,maxNodeSize=14,cellSize={w:256,h:256},grafWrap=28,leftAlign=6,centerAlign=18*grafWrap,packY=260;const welcomeMessage=`Welcome to Infinite Hell. \nYou are in ${gme.lvlName}. \nYou are morally neutral. \n\nYou must perform a moral act to find your way to Heaven. \n\nIf you sin, you will descend further into Hell.`;let mapAlpha=0,mapCellSize=20;function start(){gme.setBounds("top",gme.height/2),gme.setBounds("left",gme.width/2),gme.setBounds("right",cols*cellSize.w-gme.width/2),gme.setBounds("bottom",rows*cellSize.h-gme.height/2),map=new HellMap(cols,rows,minNodeSize,maxNodeSize),player=new Player(gme.anims.sprites.player,gme.width/2,gme.height/2),pack=new Pack,god=new Sprite(256,gme.height/2),god.center=!0,god.addAnimation(gme.anims.sprites.god),gme.scenes.add(god,"win","display"),ui={},ui.metrics={},ui.metrics.levelIcon=new UI({x:20,y:22,animation:gme.anims.ui.hell_icon}),gme.scenes.addToDisplay(ui.metrics.levelIcon,["map","pack","message"]),ui.metrics.level=new UIMetric(30,8,()=>gme.lvl.toString()),ui.metrics.moralityIcon=new UI({x:90,y:22,animation:gme.anims.ui.morality_icon}),gme.scenes.addToDisplay(ui.metrics.moralityIcon,["map","pack","message"]),ui.metrics.moralityIcon.animation.state="neutral",ui.metrics.morality=new UIMetric(104,8,()=>(0==player.moralityScore?ui.metrics.moralityIcon.animation.state="neutral":player.moralityScore<0?ui.metrics.moralityIcon.animation.state="bad":player.moralityScore>0&&(ui.metrics.moralityIcon.animation.state="good"),player.moralityScore.toString())),ui.metrics.hunger=new UIMetric(140,8,()=>player.hungerString),ui.metrics.hunger.letters=gme.anims.lettering.messages,ui.packToggle=new HellToggle({x:-32,y:22,animation:gme.anims.ui.pack_icon,onClick:t=>{t?gme.scene="pack":(gme.scene="map",ui.message.set(""))}}),gme.scenes.add(ui.packToggle,["map","pack"],"ui"),ui.cursor=new Cursor({walk:"css/walk.gif",interact:"css/pointer.gif",click:"css/click.gif",eat:"css/mouth.gif",loading:"css/loader.gif",read:"css/read.gif",pack:"css/pack.gif",drop:"css/drop.gif",offer:"css/offer.gif"}),ui.cursor.state="walk",ui.arrow=new Sprite(0,0),ui.arrow.addAnimation(gme.anims.ui.arrow),ui.arrow.isActive=!1,gme.scenes.add(ui.arrow,["map","pack","message","win"],"display"),ui.message=new HellMessage(6,102,"",grafWrap,gme.anims.lettering.messages),ui.message.set(welcomeMessage),gme.scene="message",ui.message.next=loadNextMap}function loadNextMap(){ui.message.continue.setMsg("Continue"),gme.scene="loading",ui.message.set(`Building ${gme.lvlName} ...`),setTimeout(buildMap,100)}function buildMap(){console.time("map"),map.build((function(){ui.message.set(""),gme.scene="map",console.timeEnd("map"),player.died&&player.reborn(),player.spawn(),map.addHellsGate()}))}function update(){player.update(),gme.scenes.current.update()}function draw(){gme.scenes.current.display(),player.display()}function sizeCanvas(){gme.width=window.innerWidth,gme.height=window.innerHeight,gme.canvas.width=window.innerWidth*gme.dpr,gme.canvas.height=window.innerHeight*gme.dpr,gme.ctx.scale(gme.dpr,gme.dpr),gme.canvas.style.zoom=1/gme.dpr,gme.ctx.miterLimit=1,gme.ctxStrokeColor=void 0,player.position.x=gme.width/2,player.position.y=gme.height/2}function keyDown(t){switch(t){case"a":case"left":player.inputKey("left",!0);break;case"w":case"up":player.inputKey("up",!0);break;case"d":case"right":player.inputKey("right",!0);break;case"s":case"down":player.inputKey("down",!0)}}function keyUp(t){switch(t){case"a":case"left":player.inputKey("left",!1);break;case"w":case"up":player.inputKey("up",!1);break;case"d":case"right":player.inputKey("right",!1);break;case"s":case"down":player.inputKey("down",!1)}}function mouseMoved(t,e){ui.cursor.x=t,ui.cursor.y=e,gme.scenes.current.mouseMoved(t,e),cursor.style.left=t+"px",cursor.style.top=e+"px"}function mouseDown(t,e){ui.cursor.down(),gme.scenes.current.mouseDown(t,e),"walk"==ui.cursor.state&&player.setTarget(t-player.position.x,e-player.position.y)}function mouseUp(t,e){ui.cursor.up(),gme.scenes.current.mouseUp(t,e)}document.addEventListener("keydown",t=>{"Equal"==t.code?mapAlpha=Math.min(1,mapAlpha+.5):"Minus"==t.code?mapAlpha=Math.max(0,mapAlpha-.5):"Enter"==t.code&&ui.message.continue.onClick()});
//# sourceMappingURL=src_maps/hell.min.js.map
